// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package speechtotext_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SpeechToTextClient is the client API for SpeechToText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	NewContext(ctx context.Context, in *NewContextRequest, opts ...grpc.CallOption) (SpeechToText_NewContextClient, error)
	WriteAudio(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_WriteAudioClient, error)
	OutputChan(ctx context.Context, in *OutputChanRequest, opts ...grpc.CallOption) (SpeechToText_OutputChanClient, error)
}

type speechToTextClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextClient(cc grpc.ClientConnInterface) SpeechToTextClient {
	return &speechToTextClient{cc}
}

func (c *speechToTextClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/speechtotext.SpeechToText/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechToTextClient) NewContext(ctx context.Context, in *NewContextRequest, opts ...grpc.CallOption) (SpeechToText_NewContextClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpeechToText_serviceDesc.Streams[0], "/speechtotext.SpeechToText/NewContext", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextNewContextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpeechToText_NewContextClient interface {
	Recv() (*NewContextReply, error)
	grpc.ClientStream
}

type speechToTextNewContextClient struct {
	grpc.ClientStream
}

func (x *speechToTextNewContextClient) Recv() (*NewContextReply, error) {
	m := new(NewContextReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechToTextClient) WriteAudio(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_WriteAudioClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpeechToText_serviceDesc.Streams[1], "/speechtotext.SpeechToText/WriteAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextWriteAudioClient{stream}
	return x, nil
}

type SpeechToText_WriteAudioClient interface {
	Send(*WriteAudioRequest) error
	CloseAndRecv() (*WriteAudioReply, error)
	grpc.ClientStream
}

type speechToTextWriteAudioClient struct {
	grpc.ClientStream
}

func (x *speechToTextWriteAudioClient) Send(m *WriteAudioRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextWriteAudioClient) CloseAndRecv() (*WriteAudioReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteAudioReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechToTextClient) OutputChan(ctx context.Context, in *OutputChanRequest, opts ...grpc.CallOption) (SpeechToText_OutputChanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpeechToText_serviceDesc.Streams[2], "/speechtotext.SpeechToText/OutputChan", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextOutputChanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpeechToText_OutputChanClient interface {
	Recv() (*OutputChanReply, error)
	grpc.ClientStream
}

type speechToTextOutputChanClient struct {
	grpc.ClientStream
}

func (x *speechToTextOutputChanClient) Recv() (*OutputChanReply, error) {
	m := new(OutputChanReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextServer is the server API for SpeechToText service.
// All implementations must embed UnimplementedSpeechToTextServer
// for forward compatibility
type SpeechToTextServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	NewContext(*NewContextRequest, SpeechToText_NewContextServer) error
	WriteAudio(SpeechToText_WriteAudioServer) error
	OutputChan(*OutputChanRequest, SpeechToText_OutputChanServer) error
	mustEmbedUnimplementedSpeechToTextServer()
}

// UnimplementedSpeechToTextServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechToTextServer struct {
}

func (UnimplementedSpeechToTextServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSpeechToTextServer) NewContext(*NewContextRequest, SpeechToText_NewContextServer) error {
	return status.Errorf(codes.Unimplemented, "method NewContext not implemented")
}
func (UnimplementedSpeechToTextServer) WriteAudio(SpeechToText_WriteAudioServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteAudio not implemented")
}
func (UnimplementedSpeechToTextServer) OutputChan(*OutputChanRequest, SpeechToText_OutputChanServer) error {
	return status.Errorf(codes.Unimplemented, "method OutputChan not implemented")
}
func (UnimplementedSpeechToTextServer) mustEmbedUnimplementedSpeechToTextServer() {}

// UnsafeSpeechToTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServer will
// result in compilation errors.
type UnsafeSpeechToTextServer interface {
	mustEmbedUnimplementedSpeechToTextServer()
}

func RegisterSpeechToTextServer(s *grpc.Server, srv SpeechToTextServer) {
	s.RegisterService(&_SpeechToText_serviceDesc, srv)
}

func _SpeechToText_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechToTextServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/speechtotext.SpeechToText/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechToTextServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeechToText_NewContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeechToTextServer).NewContext(m, &speechToTextNewContextServer{stream})
}

type SpeechToText_NewContextServer interface {
	Send(*NewContextReply) error
	grpc.ServerStream
}

type speechToTextNewContextServer struct {
	grpc.ServerStream
}

func (x *speechToTextNewContextServer) Send(m *NewContextReply) error {
	return x.ServerStream.SendMsg(m)
}

func _SpeechToText_WriteAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServer).WriteAudio(&speechToTextWriteAudioServer{stream})
}

type SpeechToText_WriteAudioServer interface {
	SendAndClose(*WriteAudioReply) error
	Recv() (*WriteAudioRequest, error)
	grpc.ServerStream
}

type speechToTextWriteAudioServer struct {
	grpc.ServerStream
}

func (x *speechToTextWriteAudioServer) SendAndClose(m *WriteAudioReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextWriteAudioServer) Recv() (*WriteAudioRequest, error) {
	m := new(WriteAudioRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SpeechToText_OutputChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OutputChanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeechToTextServer).OutputChan(m, &speechToTextOutputChanServer{stream})
}

type SpeechToText_OutputChanServer interface {
	Send(*OutputChanReply) error
	grpc.ServerStream
}

type speechToTextOutputChanServer struct {
	grpc.ServerStream
}

func (x *speechToTextOutputChanServer) Send(m *OutputChanReply) error {
	return x.ServerStream.SendMsg(m)
}

var _SpeechToText_serviceDesc = grpc.ServiceDesc{
	ServiceName: "speechtotext.SpeechToText",
	HandlerType: (*SpeechToTextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SpeechToText_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewContext",
			Handler:       _SpeechToText_NewContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteAudio",
			Handler:       _SpeechToText_WriteAudio_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OutputChan",
			Handler:       _SpeechToText_OutputChan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "speechtotext.proto",
}
