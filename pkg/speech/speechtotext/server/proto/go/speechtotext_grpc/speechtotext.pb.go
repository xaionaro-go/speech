// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.12
// source: speechtotext.proto

package speechtotext_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WhisperSamplingStrategy int32

const (
	WhisperSamplingStrategy_WhisperSamplingStrategyUndefined   WhisperSamplingStrategy = 0
	WhisperSamplingStrategy_WhisperSamplingStrategyGreedy      WhisperSamplingStrategy = 1
	WhisperSamplingStrategy_WhisperSamplingStrategyBreamSearch WhisperSamplingStrategy = 2
)

// Enum value maps for WhisperSamplingStrategy.
var (
	WhisperSamplingStrategy_name = map[int32]string{
		0: "WhisperSamplingStrategyUndefined",
		1: "WhisperSamplingStrategyGreedy",
		2: "WhisperSamplingStrategyBreamSearch",
	}
	WhisperSamplingStrategy_value = map[string]int32{
		"WhisperSamplingStrategyUndefined":   0,
		"WhisperSamplingStrategyGreedy":      1,
		"WhisperSamplingStrategyBreamSearch": 2,
	}
)

func (x WhisperSamplingStrategy) Enum() *WhisperSamplingStrategy {
	p := new(WhisperSamplingStrategy)
	*p = x
	return p
}

func (x WhisperSamplingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhisperSamplingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_speechtotext_proto_enumTypes[0].Descriptor()
}

func (WhisperSamplingStrategy) Type() protoreflect.EnumType {
	return &file_speechtotext_proto_enumTypes[0]
}

func (x WhisperSamplingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhisperSamplingStrategy.Descriptor instead.
func (WhisperSamplingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{0}
}

type WhisperAlignmentAheadsPreset int32

const (
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetNone     WhisperAlignmentAheadsPreset = 0
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetNTopMost WhisperAlignmentAheadsPreset = 1
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetCustom   WhisperAlignmentAheadsPreset = 2
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetTinyEn   WhisperAlignmentAheadsPreset = 3
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetTiny     WhisperAlignmentAheadsPreset = 4
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetBaseEn   WhisperAlignmentAheadsPreset = 5
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetBase     WhisperAlignmentAheadsPreset = 6
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetSmallEn  WhisperAlignmentAheadsPreset = 7
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetSmall    WhisperAlignmentAheadsPreset = 9
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetMediumEn WhisperAlignmentAheadsPreset = 10
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetMedium   WhisperAlignmentAheadsPreset = 11
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetLargeV1  WhisperAlignmentAheadsPreset = 12
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetLargeV2  WhisperAlignmentAheadsPreset = 13
	WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetLargeV3  WhisperAlignmentAheadsPreset = 14
)

// Enum value maps for WhisperAlignmentAheadsPreset.
var (
	WhisperAlignmentAheadsPreset_name = map[int32]string{
		0:  "WhisperAlignmentAheadsPresetNone",
		1:  "WhisperAlignmentAheadsPresetNTopMost",
		2:  "WhisperAlignmentAheadsPresetCustom",
		3:  "WhisperAlignmentAheadsPresetTinyEn",
		4:  "WhisperAlignmentAheadsPresetTiny",
		5:  "WhisperAlignmentAheadsPresetBaseEn",
		6:  "WhisperAlignmentAheadsPresetBase",
		7:  "WhisperAlignmentAheadsPresetSmallEn",
		9:  "WhisperAlignmentAheadsPresetSmall",
		10: "WhisperAlignmentAheadsPresetMediumEn",
		11: "WhisperAlignmentAheadsPresetMedium",
		12: "WhisperAlignmentAheadsPresetLargeV1",
		13: "WhisperAlignmentAheadsPresetLargeV2",
		14: "WhisperAlignmentAheadsPresetLargeV3",
	}
	WhisperAlignmentAheadsPreset_value = map[string]int32{
		"WhisperAlignmentAheadsPresetNone":     0,
		"WhisperAlignmentAheadsPresetNTopMost": 1,
		"WhisperAlignmentAheadsPresetCustom":   2,
		"WhisperAlignmentAheadsPresetTinyEn":   3,
		"WhisperAlignmentAheadsPresetTiny":     4,
		"WhisperAlignmentAheadsPresetBaseEn":   5,
		"WhisperAlignmentAheadsPresetBase":     6,
		"WhisperAlignmentAheadsPresetSmallEn":  7,
		"WhisperAlignmentAheadsPresetSmall":    9,
		"WhisperAlignmentAheadsPresetMediumEn": 10,
		"WhisperAlignmentAheadsPresetMedium":   11,
		"WhisperAlignmentAheadsPresetLargeV1":  12,
		"WhisperAlignmentAheadsPresetLargeV2":  13,
		"WhisperAlignmentAheadsPresetLargeV3":  14,
	}
)

func (x WhisperAlignmentAheadsPreset) Enum() *WhisperAlignmentAheadsPreset {
	p := new(WhisperAlignmentAheadsPreset)
	*p = x
	return p
}

func (x WhisperAlignmentAheadsPreset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhisperAlignmentAheadsPreset) Descriptor() protoreflect.EnumDescriptor {
	return file_speechtotext_proto_enumTypes[1].Descriptor()
}

func (WhisperAlignmentAheadsPreset) Type() protoreflect.EnumType {
	return &file_speechtotext_proto_enumTypes[1]
}

func (x WhisperAlignmentAheadsPreset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhisperAlignmentAheadsPreset.Descriptor instead.
func (WhisperAlignmentAheadsPreset) EnumDescriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{1}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadToReturn         string `protobuf:"bytes,1,opt,name=payloadToReturn,proto3" json:"payloadToReturn,omitempty"`
	PayloadToIgnore         string `protobuf:"bytes,2,opt,name=payloadToIgnore,proto3" json:"payloadToIgnore,omitempty"`
	RequestExtraPayloadSize int32  `protobuf:"varint,3,opt,name=requestExtraPayloadSize,proto3" json:"requestExtraPayloadSize,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetPayloadToReturn() string {
	if x != nil {
		return x.PayloadToReturn
	}
	return ""
}

func (x *PingRequest) GetPayloadToIgnore() string {
	if x != nil {
		return x.PayloadToIgnore
	}
	return ""
}

func (x *PingRequest) GetRequestExtraPayloadSize() int32 {
	if x != nil {
		return x.RequestExtraPayloadSize
	}
	return 0
}

type PingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload string `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type WhisperOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingStrategy      WhisperSamplingStrategy      `protobuf:"varint,3,opt,name=samplingStrategy,proto3,enum=speechtotext.WhisperSamplingStrategy" json:"samplingStrategy,omitempty"`
	AlignmentAheadsPreset WhisperAlignmentAheadsPreset `protobuf:"varint,5,opt,name=alignmentAheadsPreset,proto3,enum=speechtotext.WhisperAlignmentAheadsPreset" json:"alignmentAheadsPreset,omitempty"`
}

func (x *WhisperOptions) Reset() {
	*x = WhisperOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhisperOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhisperOptions) ProtoMessage() {}

func (x *WhisperOptions) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhisperOptions.ProtoReflect.Descriptor instead.
func (*WhisperOptions) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{2}
}

func (x *WhisperOptions) GetSamplingStrategy() WhisperSamplingStrategy {
	if x != nil {
		return x.SamplingStrategy
	}
	return WhisperSamplingStrategy_WhisperSamplingStrategyUndefined
}

func (x *WhisperOptions) GetAlignmentAheadsPreset() WhisperAlignmentAheadsPreset {
	if x != nil {
		return x.AlignmentAheadsPreset
	}
	return WhisperAlignmentAheadsPreset_WhisperAlignmentAheadsPresetNone
}

type NewContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelBytes      []byte  `protobuf:"bytes,1,opt,name=modelBytes,proto3" json:"modelBytes,omitempty"`
	Language        string  `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	ShouldTranslate bool    `protobuf:"varint,3,opt,name=shouldTranslate,proto3" json:"shouldTranslate,omitempty"`
	VadThreshold    float32 `protobuf:"fixed32,4,opt,name=vadThreshold,proto3" json:"vadThreshold,omitempty"`
	// Types that are assignable to Backend:
	//
	//	*NewContextRequest_Whisper
	Backend isNewContextRequest_Backend `protobuf_oneof:"Backend"`
}

func (x *NewContextRequest) Reset() {
	*x = NewContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewContextRequest) ProtoMessage() {}

func (x *NewContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewContextRequest.ProtoReflect.Descriptor instead.
func (*NewContextRequest) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{3}
}

func (x *NewContextRequest) GetModelBytes() []byte {
	if x != nil {
		return x.ModelBytes
	}
	return nil
}

func (x *NewContextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *NewContextRequest) GetShouldTranslate() bool {
	if x != nil {
		return x.ShouldTranslate
	}
	return false
}

func (x *NewContextRequest) GetVadThreshold() float32 {
	if x != nil {
		return x.VadThreshold
	}
	return 0
}

func (m *NewContextRequest) GetBackend() isNewContextRequest_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *NewContextRequest) GetWhisper() *WhisperOptions {
	if x, ok := x.GetBackend().(*NewContextRequest_Whisper); ok {
		return x.Whisper
	}
	return nil
}

type isNewContextRequest_Backend interface {
	isNewContextRequest_Backend()
}

type NewContextRequest_Whisper struct {
	Whisper *WhisperOptions `protobuf:"bytes,5,opt,name=whisper,proto3,oneof"`
}

func (*NewContextRequest_Whisper) isNewContextRequest_Backend() {}

type NewContextReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextID uint64 `protobuf:"varint,1,opt,name=contextID,proto3" json:"contextID,omitempty"`
}

func (x *NewContextReply) Reset() {
	*x = NewContextReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewContextReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewContextReply) ProtoMessage() {}

func (x *NewContextReply) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewContextReply.ProtoReflect.Descriptor instead.
func (*NewContextReply) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{4}
}

func (x *NewContextReply) GetContextID() uint64 {
	if x != nil {
		return x.ContextID
	}
	return 0
}

type WriteAudioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextID uint64 `protobuf:"varint,1,opt,name=contextID,proto3" json:"contextID,omitempty"`
	Audio     []byte `protobuf:"bytes,2,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (x *WriteAudioRequest) Reset() {
	*x = WriteAudioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAudioRequest) ProtoMessage() {}

func (x *WriteAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAudioRequest.ProtoReflect.Descriptor instead.
func (*WriteAudioRequest) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{5}
}

func (x *WriteAudioRequest) GetContextID() uint64 {
	if x != nil {
		return x.ContextID
	}
	return 0
}

func (x *WriteAudioRequest) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

type WriteAudioReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WriteAudioReply) Reset() {
	*x = WriteAudioReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAudioReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAudioReply) ProtoMessage() {}

func (x *WriteAudioReply) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAudioReply.ProtoReflect.Descriptor instead.
func (*WriteAudioReply) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{6}
}

type OutputChanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextID uint64 `protobuf:"varint,1,opt,name=contextID,proto3" json:"contextID,omitempty"`
}

func (x *OutputChanRequest) Reset() {
	*x = OutputChanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputChanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputChanRequest) ProtoMessage() {}

func (x *OutputChanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputChanRequest.ProtoReflect.Descriptor instead.
func (*OutputChanRequest) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{7}
}

func (x *OutputChanRequest) GetContextID() uint64 {
	if x != nil {
		return x.ContextID
	}
	return 0
}

type OutputChanReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transcript *Transcript `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
}

func (x *OutputChanReply) Reset() {
	*x = OutputChanReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputChanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputChanReply) ProtoMessage() {}

func (x *OutputChanReply) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputChanReply.ProtoReflect.Descriptor instead.
func (*OutputChanReply) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{8}
}

func (x *OutputChanReply) GetTranscript() *Transcript {
	if x != nil {
		return x.Transcript
	}
	return nil
}

type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variants        []*TranscriptVariant `protobuf:"bytes,1,rep,name=variants,proto3" json:"variants,omitempty"`
	Stability       float32              `protobuf:"fixed32,2,opt,name=stability,proto3" json:"stability,omitempty"`
	AudioChannelNum uint32               `protobuf:"varint,3,opt,name=audioChannelNum,proto3" json:"audioChannelNum,omitempty"`
	Language        string               `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	IsFinal         bool                 `protobuf:"varint,5,opt,name=isFinal,proto3" json:"isFinal,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{9}
}

func (x *Transcript) GetVariants() []*TranscriptVariant {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Transcript) GetStability() float32 {
	if x != nil {
		return x.Stability
	}
	return 0
}

func (x *Transcript) GetAudioChannelNum() uint32 {
	if x != nil {
		return x.AudioChannelNum
	}
	return 0
}

func (x *Transcript) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Transcript) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type TranscriptVariant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text             string             `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TranscriptTokens []*TranscriptToken `protobuf:"bytes,2,rep,name=transcriptTokens,proto3" json:"transcriptTokens,omitempty"`
	Confidence       float32            `protobuf:"fixed32,3,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *TranscriptVariant) Reset() {
	*x = TranscriptVariant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptVariant) ProtoMessage() {}

func (x *TranscriptVariant) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptVariant.ProtoReflect.Descriptor instead.
func (*TranscriptVariant) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{10}
}

func (x *TranscriptVariant) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscriptVariant) GetTranscriptTokens() []*TranscriptToken {
	if x != nil {
		return x.TranscriptTokens
	}
	return nil
}

func (x *TranscriptVariant) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type TranscriptToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeNano int64   `protobuf:"varint,1,opt,name=startTimeNano,proto3" json:"startTimeNano,omitempty"`
	EndTimeNano   int64   `protobuf:"varint,2,opt,name=endTimeNano,proto3" json:"endTimeNano,omitempty"`
	Text          string  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Confidence    float32 `protobuf:"fixed32,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Speaker       string  `protobuf:"bytes,5,opt,name=Speaker,proto3" json:"Speaker,omitempty"`
}

func (x *TranscriptToken) Reset() {
	*x = TranscriptToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptToken) ProtoMessage() {}

func (x *TranscriptToken) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptToken.ProtoReflect.Descriptor instead.
func (*TranscriptToken) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{11}
}

func (x *TranscriptToken) GetStartTimeNano() int64 {
	if x != nil {
		return x.StartTimeNano
	}
	return 0
}

func (x *TranscriptToken) GetEndTimeNano() int64 {
	if x != nil {
		return x.EndTimeNano
	}
	return 0
}

func (x *TranscriptToken) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranscriptToken) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *TranscriptToken) GetSpeaker() string {
	if x != nil {
		return x.Speaker
	}
	return ""
}

type CloseContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseContextRequest) Reset() {
	*x = CloseContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseContextRequest) ProtoMessage() {}

func (x *CloseContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseContextRequest.ProtoReflect.Descriptor instead.
func (*CloseContextRequest) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{12}
}

type CloseContextReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseContextReply) Reset() {
	*x = CloseContextReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_speechtotext_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseContextReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseContextReply) ProtoMessage() {}

func (x *CloseContextReply) ProtoReflect() protoreflect.Message {
	mi := &file_speechtotext_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseContextReply.ProtoReflect.Descriptor instead.
func (*CloseContextReply) Descriptor() ([]byte, []int) {
	return file_speechtotext_proto_rawDescGZIP(), []int{13}
}

var File_speechtotext_proto protoreflect.FileDescriptor

var file_speechtotext_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x25, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x10, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x60, 0x0a,
	0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x15, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22,
	0xe2, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x76, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x38, 0x0a, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x22, 0x2f, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x22, 0x11,
	0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x31, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x3b, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xa7, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x8a, 0x01, 0x0a, 0x17, 0x57, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x47, 0x72, 0x65, 0x65, 0x64, 0x79, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x57,
	0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0x02, 0x2a, 0xcf, 0x04, 0x0a, 0x1c, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6e, 0x79,
	0x45, 0x6e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x10,
	0x07, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x09, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x68, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61,
	0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x45, 0x6e,
	0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68,
	0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x56,
	0x31, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x56, 0x32, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x68, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x56, 0x33, 0x10, 0x0e, 0x32, 0xc2, 0x02, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x19,
	0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74,
	0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x16, 0x5a, 0x14, 0x67, 0x6f,
	0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_speechtotext_proto_rawDescOnce sync.Once
	file_speechtotext_proto_rawDescData = file_speechtotext_proto_rawDesc
)

func file_speechtotext_proto_rawDescGZIP() []byte {
	file_speechtotext_proto_rawDescOnce.Do(func() {
		file_speechtotext_proto_rawDescData = protoimpl.X.CompressGZIP(file_speechtotext_proto_rawDescData)
	})
	return file_speechtotext_proto_rawDescData
}

var file_speechtotext_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_speechtotext_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_speechtotext_proto_goTypes = []interface{}{
	(WhisperSamplingStrategy)(0),      // 0: speechtotext.WhisperSamplingStrategy
	(WhisperAlignmentAheadsPreset)(0), // 1: speechtotext.WhisperAlignmentAheadsPreset
	(*PingRequest)(nil),               // 2: speechtotext.PingRequest
	(*PingReply)(nil),                 // 3: speechtotext.PingReply
	(*WhisperOptions)(nil),            // 4: speechtotext.WhisperOptions
	(*NewContextRequest)(nil),         // 5: speechtotext.NewContextRequest
	(*NewContextReply)(nil),           // 6: speechtotext.NewContextReply
	(*WriteAudioRequest)(nil),         // 7: speechtotext.WriteAudioRequest
	(*WriteAudioReply)(nil),           // 8: speechtotext.WriteAudioReply
	(*OutputChanRequest)(nil),         // 9: speechtotext.OutputChanRequest
	(*OutputChanReply)(nil),           // 10: speechtotext.OutputChanReply
	(*Transcript)(nil),                // 11: speechtotext.Transcript
	(*TranscriptVariant)(nil),         // 12: speechtotext.TranscriptVariant
	(*TranscriptToken)(nil),           // 13: speechtotext.TranscriptToken
	(*CloseContextRequest)(nil),       // 14: speechtotext.CloseContextRequest
	(*CloseContextReply)(nil),         // 15: speechtotext.CloseContextReply
}
var file_speechtotext_proto_depIdxs = []int32{
	0,  // 0: speechtotext.WhisperOptions.samplingStrategy:type_name -> speechtotext.WhisperSamplingStrategy
	1,  // 1: speechtotext.WhisperOptions.alignmentAheadsPreset:type_name -> speechtotext.WhisperAlignmentAheadsPreset
	4,  // 2: speechtotext.NewContextRequest.whisper:type_name -> speechtotext.WhisperOptions
	11, // 3: speechtotext.OutputChanReply.transcript:type_name -> speechtotext.Transcript
	12, // 4: speechtotext.Transcript.variants:type_name -> speechtotext.TranscriptVariant
	13, // 5: speechtotext.TranscriptVariant.transcriptTokens:type_name -> speechtotext.TranscriptToken
	2,  // 6: speechtotext.SpeechToText.Ping:input_type -> speechtotext.PingRequest
	5,  // 7: speechtotext.SpeechToText.NewContext:input_type -> speechtotext.NewContextRequest
	7,  // 8: speechtotext.SpeechToText.WriteAudio:input_type -> speechtotext.WriteAudioRequest
	9,  // 9: speechtotext.SpeechToText.OutputChan:input_type -> speechtotext.OutputChanRequest
	3,  // 10: speechtotext.SpeechToText.Ping:output_type -> speechtotext.PingReply
	6,  // 11: speechtotext.SpeechToText.NewContext:output_type -> speechtotext.NewContextReply
	8,  // 12: speechtotext.SpeechToText.WriteAudio:output_type -> speechtotext.WriteAudioReply
	10, // 13: speechtotext.SpeechToText.OutputChan:output_type -> speechtotext.OutputChanReply
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_speechtotext_proto_init() }
func file_speechtotext_proto_init() {
	if File_speechtotext_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_speechtotext_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhisperOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewContextReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAudioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteAudioReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputChanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputChanReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptVariant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_speechtotext_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseContextReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_speechtotext_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*NewContextRequest_Whisper)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_speechtotext_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_speechtotext_proto_goTypes,
		DependencyIndexes: file_speechtotext_proto_depIdxs,
		EnumInfos:         file_speechtotext_proto_enumTypes,
		MessageInfos:      file_speechtotext_proto_msgTypes,
	}.Build()
	File_speechtotext_proto = out.File
	file_speechtotext_proto_rawDesc = nil
	file_speechtotext_proto_goTypes = nil
	file_speechtotext_proto_depIdxs = nil
}
